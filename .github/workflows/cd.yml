name: CD Deploy to GCP

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for context)
        uses: actions/checkout@v4

      - name: Setup SSH key in agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            # Prepare SSL directory and files
            mkdir -p ~/semantic_gap/ssl
            echo "${{ secrets.SSL_CERT_B64 }}" | base64 -d > ~/semantic_gap/ssl/fullchain.pem
            echo "${{ secrets.SSL_KEY_B64 }}"  | base64 -d > ~/semantic_gap/ssl/privkey.pem

            cd ~

            # Clone or update repository using GITHUB_TOKEN
            if [ -d semantic_gap ]; then
              cd semantic_gap
              git fetch origin main
              git reset --hard origin/main
            else
              git clone https://x-access-token:${{ github.token }}@github.com/${{ github.repository }} semantic_gap
              cd semantic_gap
            fi

            # Docker Hub login (sudo is passwordless per sudoers.d)
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" \
              | sudo docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Generate .env for docker-compose
            cat > .env <<EOF
            DOMAIN=semanticgap.mjsec.kr
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            IMAGE_TAG=latest
            DB_HOST=db
            DB_PORT=5432
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF

            # Deploy containers (with sudo)
            sudo docker-compose pull
            sudo docker-compose up -d

            # Reload nginx (also via sudo)
            sudo nginx -s reload