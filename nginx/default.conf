upstream frontend_upstream {
    server frontend:80;
}
upstream wiki_upstream {
    server wiki:3000;
}

# 1) HTTP → HTTPS
server {
    listen      80;
    server_name semanticgap.mjsec.kr;
    return      301 https://$host$request_uri;
}

# 2) HTTPS
server {
    listen              443 ssl http2;
    server_name         semanticgap.mjsec.kr;

    ssl_certificate     /etc/letsencrypt/live/semanticgap.mjsec.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/semanticgap.mjsec.kr/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # 보안 헤더
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options     DENY;
    add_header X-Content-Type-Options nosniff;
    add_header Referrer-Policy     no-referrer-when-downgrade;
    add_header X-XSS-Protection    "1; mode=block";

    client_max_body_size 50M;

    # ───────── React 정적 자산 ─────────
    # CRA 빌드의 /static, /asset-manifest.json 등
    location ^~ /static/ {
        proxy_pass         http://frontend_upstream;
        expires            1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # ───────── Wiki.js 정적 자산 ─────────
    # /wiki/_assets, /wiki/assets
    location ^~ /wiki/_assets/ {
        proxy_pass         http://wiki_upstream/_assets/;
        expires            1d;
        add_header Cache-Control "public, max-age=86400, immutable";
    }
    location ^~ /wiki/assets/ {
        proxy_pass         http://wiki_upstream/assets/;
        expires            1d;
        add_header Cache-Control "public, max-age=86400, immutable";
    }

    # ───────── Wiki.js GraphQL ─────────
    location ^~ /wiki/graphql {
        proxy_pass         http://wiki_upstream/graphql;
        proxy_set_header   Host            $host;
        proxy_set_header   X-Real-IP       $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # ───────── Wiki.js UI ─────────
    location ^~ /wiki/ {
        proxy_pass         http://wiki_upstream/;
        proxy_http_version 1.1;
        proxy_set_header   Host            $host;
        proxy_set_header   X-Real-IP       $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Upgrade         $http_upgrade;
        proxy_set_header   Connection      "upgrade";

        # HTML 내부에 절대경로로 삽입된 href="/..." → "/wiki/..."
        proxy_set_header   Accept-Encoding "";
        sub_filter_types   text/html;
        sub_filter         'href="/'    'href="/wiki/';
        sub_filter         'action="/'  'action="/wiki/';
        sub_filter_once    off;
    }

    # ───────── React 루트 진입 ─────────
    # 오직 정확히 “/” 만 React 로 보냄
    location = / {
        proxy_pass         http://frontend_upstream;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # ───────── 그 외 전부 Wiki.js ─────────
    # /p 같은 퍼머링크나, /home 등 “/” 외 모든 요청을 Wiki.js 에서 처리
    location / {
        proxy_pass         http://wiki_upstream;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }
}
